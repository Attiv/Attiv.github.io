[{"title":"WKWebview修改userAgent","date":"2017-02-21T02:28:27.000Z","path":"2017/02/21/userAgent_webView/","text":"在混合开发中,难免会遇到需要服务器判断是否为app打开该网页可以通过设置webview的userAgent实现判断 参考stackoverflow 如果多个webView共有一个父类的话推荐使用: 12345678910UIWebView *webView = [[UIWebView alloc] initWithFrame:self.view.bounds];NSString *userAgent = [webView stringByEvaluatingJavaScriptFromString:@&quot;navigator.userAgent&quot;];NSString *newUserAgent = [userAgent stringByAppendingString:@&quot; Appended Custom User Agent&quot;];NSDictionary *dictionary = [NSDictionary dictionaryWithObjectsAndKeys:newUserAgent, @&quot;UserAgent&quot;, nil];[[NSUserDefaults standardUserDefaults] registerDefaults:dictionary];self.wkWebView = [[WKWebView alloc] initWithFrame:self.view.bounds];[self.wkWebView evaluateJavaScript:@&quot;navigator.userAgent&quot; completionHandler:^(id result, NSError *error) &#123; NSLog(@&quot;%@&quot;, result);&#125;]; 这一种不使用Block,适合多个webView共用一个父类 使用Block,注意block内的执行顺序 123456789101112131415161718self.wkWebView = [[WKWebView alloc] initWithFrame:self.view.bounds];__weak typeof(self) weakSelf = self;[self.wkWebView evaluateJavaScript:@&quot;navigator.userAgent&quot; completionHandler:^(id result, NSError *error) &#123; __strong typeof(weakSelf) strongSelf = weakSelf; NSString *userAgent = result; NSString *newUserAgent = [userAgent stringByAppendingString:@&quot; Appended Custom User Agent&quot;]; NSDictionary *dictionary = [NSDictionary dictionaryWithObjectsAndKeys:newUserAgent, @&quot;UserAgent&quot;, nil]; [[NSUserDefaults standardUserDefaults] registerDefaults:dictionary]; strongSelf.wkWebView = [[WKWebView alloc] initWithFrame:strongSelf.view.bounds]; // After this point the web view will use a custom appended user agent [strongSelf.wkWebView evaluateJavaScript:@&quot;navigator.userAgent&quot; completionHandler:^(id result, NSError *error) &#123; NSLog(@&quot;%@&quot;, result); &#125;];&#125;];","tags":[{"name":"ObjectC","slug":"ObjectC","permalink":"http://vittaSpace.tk/tags/ObjectC/"}]},{"title":"WKWebView 手动添加和清除Cookie","date":"2017-02-07T08:00:01.000Z","path":"2017/02/07/2017-02-07 WKWebview添加Cookie/","text":"原文链接 在原生登录的成功回调里执行[NSKeyedArchiver archiveRootObject:[NSHTTPCookieStorage sharedHTTPCookieStorage] cookies] toFile:kUserCookieFile];保存登录获取的Cookie 添加Cookie在设置WKWebview request前调用:12345678910111213NSString* value1; NSString* value2; for (NSHTTPCookie *cookie in [NSKeyedUnarchiver unarchiveObjectWithFile:kUserCookieFile]) &#123; if ([cookie.name isEqualToString:@&quot;key1&quot;]) &#123; value1 = cookie.value; &#125; else if ([cookie.name isEqualToString:@&quot;key2&quot;]) &#123; value2 = cookie.value; &#125; [request setValue:[NSString stringWithFormat:@&quot;key1=%@;key2=%@;&quot;,value1,value2] forHTTPHeaderField:@&quot;Cookie&quot;]; 如果发送AJAX请求的话,在初始化WKWebview的地方:123456789WKUserContentController* userContentController = WKUserContentController.new;WKUserScript * cookieScript = [[WKUserScript alloc] initWithSource: @&quot;document.cookie = &apos;TeskCookieKey1=TeskCookieValue1&apos;;document.cookie = &apos;TeskCookieKey2=TeskCookieValue2&apos;;&quot; injectionTime:WKUserScriptInjectionTimeAtDocumentStart forMainFrameOnly:NO];// again, use stringWithFormat: in the above line to inject your values programmatically[userContentController addUserScript:cookieScript];WKWebViewConfiguration* webViewConfig = WKWebViewConfiguration.new;webViewConfig.userContentController = userContentController;WKWebView * webView = [[WKWebView alloc] initWithFrame:CGRectMake(/*set your values*/) configuration:webViewConfig]; 清除Cookie比如在登出的时候需要清除Cookie,使用WKWebview的话就需要使用如下的方法:123456789101112131415161718if ([[UIDevice currentDevice].systemVersion floatValue] &gt;= 9.0) &#123; NSSet *websiteDataTypes = [WKWebsiteDataStore allWebsiteDataTypes]; NSDate *dateFrom = [NSDate dateWithTimeIntervalSince1970:0]; [[WKWebsiteDataStore defaultDataStore] removeDataOfTypes:websiteDataTypes modifiedSince:dateFrom completionHandler:^&#123; // Done &#125;]; &#125; [[NSFileManager defaultManager] removeItemAtPath:kUserInfoFile error:nil]; [[NSFileManager defaultManager] removeItemAtPath:kUserTokenFile error:nil]; [[NSFileManager defaultManager] removeItemAtPath:kUserCookieFile error:nil]; [webView.configuration.userContentController removeAllUserScripts];","tags":[{"name":"ObjectC","slug":"ObjectC","permalink":"http://vittaSpace.tk/tags/ObjectC/"}]},{"title":"安全性与隐私 中没有任何来源选项","date":"2017-02-04T04:40:07.000Z","path":"2017/02/04/2017-02-04 mac任何来源/","text":"打开终端 输入 sudo spctl --master-disable","tags":[{"name":"Mac","slug":"Mac","permalink":"http://vittaSpace.tk/tags/Mac/"}]},{"title":"webview缓存图片","date":"2017-01-24T03:41:32.000Z","path":"2017/01/24/2017-01-24 WKWebview缓存图片/","text":"1234567891011121314151617181920212223242526272829303132333435#pragma mark - WKWebviewDelegate- (void)webView:(WKWebView *)webView decidePolicyForNavigationResponse:(WKNavigationResponse *)navigationResponse decisionHandler:(void (^)(WKNavigationResponsePolicy))decisionHandler&#123; NSString *htmlStr = [Util changeImgSrc:[webView.URL absoluteString]];// WLog(@&quot;html == %@&quot;, htmlStr); // 读取本地JS文件，把JS加到最后面 NSString *jsPath = [[NSBundle mainBundle] pathForResource:@&quot;DetalJavascript&quot; ofType:@&quot;html&quot;]; NSString *jsHtml = [NSString stringWithContentsOfFile:jsPath encoding:NSUTF8StringEncoding error:nil]; htmlStr = [htmlStr stringByAppendingString:[NSString stringWithFormat:@&quot;\\n%@&quot;, jsHtml]]; WLog(@&quot;%@&quot;, htmlStr); NSString *docPath = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject]; // [NSKeyedArchiver archiveRootObject:htmlStr toFile:[NSString stringWithFormat:@&quot;%@/index.html&quot;, docPath]]; [webView loadHTMLString:htmlStr baseURL:[NSURL fileURLWithPath:[NSString stringWithFormat:@&quot;%@&quot;, docPath]]];// [webView loadHTMLString:htmlStr baseURL:[NSURL fileURLWithPath:@&quot;/&quot;]]; // [webView loadHTMLString:htmlStr baseURL:nil]; decisionHandler(WKNavigationResponsePolicyAllow);&#125;#pragma mark - 图片下载完成通知-(void)imageDownloadSuccess:(NSNotification *)notify&#123; NSString *imgPath = [NSString stringWithFormat:@&quot;%@&quot;,notify.object]; imgPath = [NSString stringWithFormat:@&quot;\u0010file://%@&quot;, imgPath]; NSString *imgName = [imgPath lastPathComponent]; if (imgPath) &#123; [self.bridge callHandler:@&quot;imagesDownloadCompleteHandler&quot; data:@[imgName,imgPath] responseCallback:^(id responseData) &#123; NSLog(@&quot;调用完JS后的回调：%@&quot;,responseData); &#125;]; &#125;&#125; JS文件:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;script language=&quot;javascript&quot;&gt;// 以下是固定写法，你自己的JS文件中必须包含如下代码function setupWebViewJavascriptBridge(callback) &#123; if (window.WebViewJavascriptBridge) &#123; return callback(WebViewJavascriptBridge); &#125; if (window.WVJBCallbacks) &#123; return window.WVJBCallbacks.push(callback); &#125; window.WVJBCallbacks = [callback]; var WVJBIframe = document.createElement(&apos;iframe&apos;); WVJBIframe.style.display = &apos;none&apos;; WVJBIframe.src = &apos;https://__bridge_loaded__&apos;; document.documentElement.appendChild(WVJBIframe); setTimeout(function() &#123; document.documentElement.removeChild(WVJBIframe) &#125;, 0)&#125;// 注册相关的回调setupWebViewJavascriptBridge(function(bridge) &#123; /* Initialize your app here */ //这句代码是注册一个名为&apos;JS Echo&apos;的方法,data是参数,responseCallback是返回,相当于return,供APP端调用 bridge.registerHandler(&apos;JS Echo&apos;, function(data, responseCallback) &#123; console.log(&quot;JS Echo called with:&quot;, data) responseCallback(data) &#125;) bridge.registerHandler(&apos;imagesDownloadCompleteHandler&apos;, function(data,responseCallback) &#123; var imgName = data[0]; var imgPath = data[1]; //读取未替换的图片 var imgs = document.getElementsByTagName(&apos;img&apos;); if (imgs) &#123; for (var i = 0, j = imgs.length; i &lt; j; i++) &#123; if (imgs[i].src.indexOf(imgName) &gt;= 0) &#123; imgs[i].src = imgPath; &#125; &#125; &#125; &#125;) //调用APP端原生的方法,方法名为&apos;ObjC Echo&apos;,responseData是JS端接收到的返回值. bridge.callHandler(&apos;ObjC Echo&apos;, 传入的参数 , function responseCallback(responseData) &#123; console.log(&quot;JS received response:&quot;, responseData) &#125;)&#125;)&lt;/script&gt; 工具类:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160// Util.m// ypapp//// Created by test on 2017/1/20.// Copyright © 2017年 Shinetech Zhengzhou. All rights reserved.//#import &quot;Util.h&quot;#import &lt;AFNetworking/AFNetworking.h&gt;#import &lt;CommonCrypto/CommonDigest.h&gt;#import &quot;UIImageView+AFNetworking.h&quot;@implementation Util+ (Util *)shareTool&#123; static Util *tool; static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^&#123; tool = [[Util alloc] init]; &#125;); return tool;&#125;- (NSString *)token&#123; if (nil == _token) &#123; _token = [NSString stringWithFormat:@&quot;%@&quot;, [NSKeyedUnarchiver unarchiveObjectWithFile:kUserTokenFile]]; &#125; return _token;&#125;- (void)downloadImageWithUrl:(NSString *)src&#123; // 注意：这里并没有写专门下载图片的代码，就直接使用了AFN的扩展，只是为了省麻烦而已。 UIImageView *imgView = [[UIImageView alloc] init]; NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:src]]; [imgView setImageWithURLRequest:request placeholderImage:nil success:^(NSURLRequest *_Nonnull request, NSHTTPURLResponse *_Nullable response, UIImage *_Nonnull image) &#123; NSData *data = UIImagePNGRepresentation(image); NSString *docPath = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject]; NSString *localPath = [docPath stringByAppendingPathComponent:[self md5:src]]; NSString *extension = [src pathExtension]; localPath = [localPath stringByAppendingString:[NSString stringWithFormat:@&quot;.%@&quot;, extension]]; if (![data writeToFile:localPath atomically:NO]) &#123; WLog(@&quot;写入本地失败：%@&quot;, src); &#125; else &#123; [kNotificationCenter postNotificationName:kDownloadImageSuccessNotify object:localPath]; &#125; &#125; failure:^(NSURLRequest *_Nonnull request, NSHTTPURLResponse *_Nullable response, NSError *_Nonnull error) &#123; WLog(@&quot;download image url fail: %@&quot;, src); &#125;]; if (self.imageViews == nil) &#123; self.imageViews = [[NSMutableArray alloc] init]; &#125; [self.imageViews addObject:imgView];&#125;- (NSString *)md5:(NSString *)sourceContent&#123; if (self == nil || [sourceContent length] == 0) &#123; return nil; &#125; unsigned char digest[CC_MD5_DIGEST_LENGTH], i; CC_MD5([sourceContent UTF8String], (int)[sourceContent lengthOfBytesUsingEncoding:NSUTF8StringEncoding], digest); NSMutableString *ms = [NSMutableString string]; for (i = 0; i &lt; CC_MD5_DIGEST_LENGTH; i++) &#123; [ms appendFormat:@&quot;%02x&quot;, (int)(digest[i])]; &#125; return [ms copy];&#125;/** 修改HTML里的&lt;IMG src&gt; @param urlStr 原始链接 @return 修改之后的HTMLString */+ (NSString *)changeImgSrc:(NSString *)urlStr&#123; NSString *htmlStr = [[NSString alloc] initWithContentsOfURL:[NSURL URLWithString:urlStr] encoding:NSUTF8StringEncoding error:nil]; NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:@&quot;&lt;img[^&gt;]+src\\\\s*=\\\\s*[&apos;\\&quot;]([^&apos;\\&quot;]+)[&apos;\\&quot;][^&gt;]*&gt;&quot; options:NSRegularExpressionAllowCommentsAndWhitespace error:nil]; NSArray *result = [regex matchesInString:htmlStr options:NSMatchingReportCompletion range:NSMakeRange(0, htmlStr.length)]; NSMutableDictionary *urlDicts = [[NSMutableDictionary alloc] init]; NSString *docPath = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject]; [result enumerateObjectsUsingBlock:^(id _Nonnull obj, NSUInteger idx, BOOL *_Nonnull stop) &#123; NSTextCheckingResult *item = (NSTextCheckingResult *)obj; NSString *imgHtml = [htmlStr substringWithRange:[item rangeAtIndex:0]]; NSArray *tmpArray = nil; if ([imgHtml rangeOfString:@&quot;src=\\&quot;&quot;].location != NSNotFound) &#123; tmpArray = [imgHtml componentsSeparatedByString:@&quot;src=\\&quot;&quot;]; &#125; else if ([imgHtml rangeOfString:@&quot;src=&quot;].location != NSNotFound) &#123; tmpArray = [imgHtml componentsSeparatedByString:@&quot;src=&quot;]; &#125; if (tmpArray.count &gt;= 2) &#123; NSString *src = tmpArray[1]; NSUInteger loc = [src rangeOfString:@&quot;\\&quot;&quot;].location; if (loc != NSNotFound) &#123; src = [src substringToIndex:loc]; WLog(@&quot;正确解析出来的SRC为：%@&quot;, src); if (src.length &gt; 0) &#123; NSString *extension = [src pathExtension]; NSString *localPath = [docPath stringByAppendingPathComponent:[[self shareTool] md5:src]]; localPath = [localPath stringByAppendingString:[NSString stringWithFormat:@&quot;.%@&quot;, extension]]; localPath = [NSString stringWithFormat:@&quot;\u0010file://%@&quot;, localPath]; // 先将链接取个本地名字，且获取完整路径 [urlDicts setObject:localPath forKey:src]; &#125; &#125; &#125; &#125;]; // 遍历所有的URL，替换成本地的URL，并异步获取图片 for (NSString *src in urlDicts.allKeys) &#123; NSString *localPath = [urlDicts objectForKey:src]; htmlStr = [htmlStr stringByReplacingOccurrencesOfString:src withString:localPath]; localPath = [localPath stringByReplacingOccurrencesOfString:@&quot;file://&quot; withString:@&quot;&quot;]; // 如果已经缓存过，就不需要重复加载了。 if (![[NSFileManager defaultManager] fileExistsAtPath:localPath]) &#123; [[self shareTool] downloadImageWithUrl:src]; &#125; &#125; return htmlStr; &#125;@end","tags":[{"name":"ObjectC","slug":"ObjectC","permalink":"http://vittaSpace.tk/tags/ObjectC/"}]},{"title":"图片模糊,图片当背景","date":"2017-01-16T10:50:37.000Z","path":"2017/01/16/2017-01-16 18:49:47图片模糊背景/","text":"如果使用self.view.backgroundColor = [UIColor colorWithPatternImage:image]不仅耗内存,如果图片太小还会平铺好多.在这里推荐一个图片模糊的第三方:FXBlurView 使用:self.view.layer.contents = (id)[avaterImageView.image blurredImageWithRadius:9.0 iterations:9 tintColor:nil].CGImage;就可以用模糊图片作为view的backgroundColor.","tags":[{"name":"ObjectC","slug":"ObjectC","permalink":"http://vittaSpace.tk/tags/ObjectC/"}]},{"title":"testFiled监听输入","date":"2017-01-10T08:11:14.000Z","path":"2017/01/10/2017-01-10 16:10:37 TextField监听/","text":"[textField addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];","tags":[{"name":"ObjectC","slug":"ObjectC","permalink":"http://vittaSpace.tk/tags/ObjectC/"}]},{"title":"cocoapods 不生成xcworkspace文件","date":"2017-01-05T03:11:04.000Z","path":"2017/01/05/2017-01-05 11:10:25 CocosPod问题/","text":"执行完pod install 如果不生成 .xcworkspace 文件,可能是版本太低执行sudo gem install cocoa pods 更新版本再pod install就可以了.","tags":[{"name":"ObjectC","slug":"ObjectC","permalink":"http://vittaSpace.tk/tags/ObjectC/"}]},{"title":"Markdown语法 ","date":"2016-12-21T10:23:53.000Z","path":"2016/12/21/2016-12-21 18:23:19 MD语法/","text":"转自CSDN 目录123456789101112131415# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题等号及减号也可以进行标题的书写，不过只能书写二级标题，并且需要写在文字的下面，减号及等号的数量不会影响标题的基数，如下：二级标题=========二级标题--------- 列表12345678910111213141516171819202122无序列表的使用，在符号“-”后加空格使用。如下：- 无序列表1- 无序列表2- 无序列表3如果要控制列表的层级，则需要在符号“-”前使用空格。如下：- 无序列表1- 无序列表2 - 无序列表2.1 - 列表内容 - 列表内容 有序列表的使用，在数字及符号“.”后加空格几个，如下：1. 有序列表12. 有序列表23. 有序列表3有序列表如果要区分层级，也可以在数字前加空格。 引用12345引用的格式是使用符号“&gt;”后面书写文字，及可以使用引用。如下：&gt;这个是引用&gt; 是不是和电子邮件中的&gt; 引用格式很像 粗体与斜体12345粗体的使用是在需要加粗的文字前后各加两个“*”，而斜体的使用则是在需要斜体的文字前后各加一个“*”，如果要使用粗体和斜体，那么就是在需要操作的文字前后各加三个“*”。如下：**这个是粗体***这个是斜体****这个是粗体加斜体*** 链接与图片1234567891011121314151617在文中直接加链接，中括号中是需要添加链接的文字，圆括号中是需要添加的链接，如下：[link text](http://example.com/ &quot;optional title&quot;)在引用中加链接，第一个中括号添加需要添加的文字，第二个中括号中是引用链接的id，之后在引用中，使用id加链接：如下：[link text][id][id]: http://example.com/ &quot;optional title here&quot;在文中直接引用链接，直接使用尖括号，把链接加入到尖括号中就可以实现，如下：&lt;http://example.com/&gt; or &lt;address@example.com&gt;插入互联网上图片，格式如下：![这里写图片描述](http://img3.douban.com/mpic/s1108264.jpg)![这里写图片描述][jane-eyre-douban][jane-eyre-douban]: http://img3.douban.com/mpic/s1108264.jpg 代码块123456789用TAB键起始的段落，会被认为是代码块，如下： &lt;php&gt; echo “hello world&quot;; &lt;/php&gt;如果在一个行内需要引用代码，只要用反引号`引起来就好，如下：Use the `printf()` function. 分割线与删除线123456789可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，同时需要在分隔线的上面空一行。如下：---****___删除线的使用，在需要删除的文字前后各使用两个符合“~”，如下~~Mistaken text.~~ 代码块与语法高亮在需要高亮的代码块的前一行及后一行使用三个反引号“`”，同时第一行反引号后面表面代码块所使用的语言，如下： 123require 'redcarpet'markdown = Redcarpet.new(\"Hello World!\")puts markdown.to_html 表格1234567可以使用冒号来定义表格的对齐方式，如下：| Tables | Are | Cool || ------------- |:-------------:| -----:|| col 3 is | right-aligned | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 | LaTex数学公式12345678使用MathJax渲染*LaTex* 数学公式，详见[math.stackexchange.com]行内公式，数学公式为：$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$块级公式：$$ x = \\dfrac&#123;-b \\pm \\sqrt&#123;b^2 - 4ac&#125;&#125;&#123;2a&#125; $$ 更多LaTex语法请参考 这儿。 UML图123456可以渲染序列图：```sequence张三-&gt;李四: 嘿，小四儿, 写博客了没?Note right of 李四: 李四愣了一下，说：李四--&gt;张三: 忙得吐血，哪有时间写。 或者流程图： 12345678st=&gt;start: 开始e=&gt;end: 结束op=&gt;operation: 我的操作cond=&gt;condition: 确认？st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 关于 序列图 语法，参考 这儿 关于 流程图 语法，参考 这儿","tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://vittaSpace.tk/tags/Markdown/"}]},{"title":"AnjularJS 跳转 ","date":"2016-12-21T09:38:44.000Z","path":"2016/12/21/2016-12-21 Angularjs jump/","text":"本文转自:风轻云淡 AngularJS之页面跳转Route 除了引用AngularJs.js外，还要引用路由JS, “~/Scripts/angularjs/angular-route.js” 通过$routeProvider定义路由，示例:1234567891011121314var testModule = angular.module(&apos;testModule&apos;, [&apos;ngRoute&apos;]);testModule.config([&apos;$routeProvider&apos;, function ($routeProvider) &#123; $routeProvider.when(&apos;/2&apos;, &#123;//&apos;/2&apos;定义的路由路径，以后通过此路径访问，通常定义为短路径 templateUrl: &quot;/home/index2&quot;,//&quot;/home/index2&quot;是路由实际访问的路径，可以是asp.net mvc的访问路径（如此例），也可是具体的页面路径，如“test/test.html&quot; controller:&apos;testController&apos;//路由跳转的controller,后面必须定义此控制器 &#125;); $routeProvider.when(&apos;/3&apos;, &#123; templateUrl: &quot;/home/index3&quot;, controller:&apos;testController&apos; &#125;)&#125;]); 3.使用路由跳转，结合ng-view做spa 3.1 在JS中使用$location进行跳转，如示例，在需要的时候调用goToIndex2即可:123456 testModule.controller(&quot;testController&quot;, [&quot;$scope&quot;, &quot;$location&quot;, function ($scope, $location) &#123; $scope.goToIndex2 = function () &#123; $location.path(&quot;/2&quot;) &#125;&#125;]); 3.2 在html代码中使用href=”#path”来进行跳转 1234567891011121314151617181920212223&lt;html &gt;&lt;head&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot; /&gt; &lt;title&gt;Index1&lt;/title&gt; @Styles.Render(&quot;~/Content/css/base&quot;) @Scripts.Render(&quot;~/script/base&quot;) &lt;script src=&quot;~/scripts/ngmoudle/app.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div ng-app=&quot;testModule&quot; ng-controller=&quot;testController&quot;&gt; &lt;header&gt; &lt;h1&gt;This is Index1&lt;/h1&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; ng-click=&quot;goToIndex2()&quot;&gt;Index2&lt;/button&gt; &lt;a href=&quot;#/3&quot; class=&quot;btn btn-default&quot;&gt;Index3&lt;/a&gt;&lt;!--通过heft=&quot;#path&quot;方式进行跳转--&gt; &lt;a href=&quot;#/2&quot; class=&quot;btn btn-default&quot; &gt;Index2&lt;/a&gt; &lt;/header&gt; &lt;div ng-view&gt; &lt;/div&gt; &lt;footer&gt;PAGE FOOTER&lt;/footer&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","tags":[{"name":"AngularJS","slug":"AngularJS","permalink":"http://vittaSpace.tk/tags/AngularJS/"}]},{"title":"symfony学习记录 ","date":"2016-12-06T02:47:27.000Z","path":"2016/12/06/2016-12-07 18-14-16 symfony学习中的记录/","text":"代码结构 app/ 里存放的大部分是配置信息 src/ 存放的是php代码 vendor 存放的是第三方的库 web/ 存放的是前端代码 在src/里 M:Entity,V:web/(根目录里的),C:Controller html文件再web/partials里 在开发中修改了.pug 或者 es5/6 文件,想要看到效果需要执行 gulp watch 前端开发中添加控件使用了第三方库 Bootstrap 关于这个库在学习中我会另外记录. 跳转$state.go(&#39;frame.a-b&#39;) 跳转到web/scripts/states/a/b.js b.js里面在angular.module里含有frame.a-b,等学习了angular之后再补充 数据库中$query = $this-&gt;em()-&gt;getRepository(&#39;AppBundle:Company&#39;)$result = $query-&gt;getQuery()-&gt;getResult();$query可以添加语句$result 就是查询到的结果 assets.js添加完js文件(路由文件)之后需要在web/scripts/assets.js添加 记录如果ng-table=&quot;ctrl.tableParams&quot; ,在对应的angular中需要写controller as ctrl js中用debugger进行调试 日期格式: 比如 p(ng-bind=&quot;item.checkOutTime | moment: &#39;L LT&#39;&quot;) L 是日期 LT是时间 ng-bind=&quot;item.checkOutTime 返回的数据item有checkOutTime属性才行 template-pagination=&quot;ng-table/pagination.html&quot; 表格分页 导入数据库后要记得清下cookie 使用queryList的才使用sliceQueryArray方法分页 sql语句里带有?后面就需要使用bindValue绑定值 php请求里所有的变量在发送的时候都会初始化 鼠标变成小手&lt;a href=&quot;#&quot; style=&quot;cursor:pointer&quot;&gt;CSS鼠标手型效果&lt;/a&gt; 删除数组中的某一元素for ($i = 0; $i &lt; count($r[&apos;locations&apos;]); $i++) { if (&apos;inactive&apos; == $r[&apos;locations&apos;][$i]-&gt;getStatus()) { unset($r[&apos;locations&apos;][$i]); } } Angularjs 里面如果要用$rootscope services里面的function 里面也要加上$rootScope","tags":[{"name":"php","slug":"php","permalink":"http://vittaSpace.tk/tags/php/"}]},{"title":"postgresql数据库导入 ","date":"2016-12-06T02:47:27.000Z","path":"2016/12/06/2016-12-07 15:14:22  postgresql数据库导入/","text":"创建用户 createuser -d -a -P 用户名 导入到本地数据库 psql -h 0.0.0.0 -d 数据库 -U 用户 -p 5432 -f 要导入的数据库.sql","tags":[{"name":"postgresql","slug":"postgresql","permalink":"http://vittaSpace.tk/tags/postgresql/"}]},{"title":"Git命令 ","date":"2016-12-06T02:47:27.000Z","path":"2016/12/06/2016-12-06 10:36:52 Git命令/","text":"Git命令git init 初始化本地git仓库（创建新仓库） git config –global user.name “xxx” 配置用户名 git config –global user.email “xxx@xxx.com” 配置邮件 git config –global color.ui true git status等命令自动着色 git config –global color.status auto git config –global color.diff auto git config –global color.branch auto git config –global color.interactive auto git config –global –unset http.proxy remove proxy configuration on git git clone git+ssh://git@192.168.53.168/VT.git clone远程仓库 git status 查看当前版本状态（是否修改） git add xyz 添加xyz文件至index git add . 增加当前子目录下所有更改过的文件至index git commit -m ‘xxx’ 提交 git commit –amend -m ‘xxx’ 合并上一次提交（用于反复修改） git commit -am ‘xxx’ 将add和commit合为一步 git rm xxx 删除index中的文件 git rm -r * 递归删除 git log 显示提交日志 git log -1 显示1行日志 -n为n行 git log -5 git log –stat 显示提交日志及相关变动文件 git log -p -m git show dfb02e6e4f2f7b573337763e5c0013802e392818 显示某个提交的详细内容 git show dfb02 可只用commitid的前几位 git show HEAD 显示HEAD提交日志 git show HEAD^ 显示HEAD的父（上一个版本）的提交日志^^为上两个版本 ^5为上5个版本 git tag 显示已存在的tag git tag -a v2.0 -m ‘xxx’ 增加v2.0的tag git show v2.0 显示v2.0的日志及详细内容 git log v2.0 显示v2.0的日志 git diff 显示所有未添加至index的变更 git diff –cached 显示所有已添加index但还未commit的变更 git diff HEAD^ 比较与上一个版本的差异 git diff HEAD – ./lib 比较与HEAD版本lib目录的差异 git diff origin/master..master 比较远程分支master上有本地分支master上没有的 git diff origin/master..master –stat 只显示差异的文件，不显示具体内容 git remote add origin git+ssh://git@192.168.53.168/VT. 增加远程定义（用于push/pull/fetch） git branch 显示本地分支 git branch –contains 50089 显示包含提交50089的分支 git branch -a 显示所有分支 git branch -r 显示所有原创分支 git branch –merged 显示所有已合并到当前分支的分支 git branch –no-merged 显示所有未合并到当前分支的分支 git branch -m master master_copy 本地分支改名 git checkout -b master_copy 从当前分支创建新分支master_copy并检出 git checkout -b master master_copy 上面的完整版 git checkout features/performance 检出已存在的features/performance分支git checkout –track hotfixes/BJVEP933 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支 git checkout v2.0 检出版本v2.0 git checkout -b devel origin/develop 从远程分支develop创建新本地分支devel并检出 git checkout – README 检出head版本的README文件（可用于修改错误回退） git merge origin/master 合并远程master分支至当前分支 git cherry-pick ff44785404a8e 合并提交ff44785404a8e的修改 git push origin master 将当前分支push到远程master分支 git push origin :hotfixes/BJVEP933 删除远程仓库的hotfixes/BJVEP933分支 git push –tags 把所有tag推送到远程仓库 git fetch 获取所有远程分支（不更新本地分支，另需merge） git fetch –prune 获取所有原创分支并清除服务器上已删掉的分支 git pull origin master 获取远程分支master并merge到当前分支 git mv README README2 重命名文件README为README2 git reset –hard HEAD 将当前版本重置为HEAD（通常用于merge失败回退） git rebase git branch -d hotfixes/BJVEP933 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）git branch -D hotfixes/BJVEP933 强制删除分支hotfixes/BJVEP933 git ls-files 列出git index包含的文件 git show-branch 图示当前分支历史 git show-branch –all 图示所有分支历史 git whatchanged 显示提交历史对应的文件修改 git revert dfb02e6e4f2f7b573337763e5c0013802e392818撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818 git ls-tree HEAD 内部命令：显示某个git对象 git rev-parse v2.0 内部命令：显示某个ref对于的SHA1 HASH git reflog 显示所有提交，包括孤立节点 git show HEAD@{5} git show master@{yesterday} 显示master分支昨天的状态 git log –pretty=format:’%h %s’ –graph 图示提交日志 git show HEAD~3 git show -s –pretty=raw 2be7fcb476 git stash 暂存当前修改，将所有至为HEAD状态 git stash list 查看所有暂存 git stash show -p stash@{0} 参考第一次暂存 git stash apply stash@{0} 应用第一次暂存 git grep “delete from” 文件中搜索文本“deletefrom” git grep -e ‘#define’ –and -e SORT_DIRENT git gc git fsck","tags":[{"name":"Git","slug":"Git","permalink":"http://vittaSpace.tk/tags/Git/"}]},{"title":"Mysql数据库导入","date":"2016-12-05T06:22:13.000Z","path":"2016/12/05/Mysql-import-md/","text":"Mac下Mysql数据库导入 使用终端或者可视化软件创建数据库 终端,输入/usr/local/mysql/bin/mysql -u 用户名 -p回车 输入密码 进入数据库 选择刚刚创建的数据库 执行source 数据库.sql文件路径","tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://vittaSpace.tk/tags/Mysql/"}]},{"title":"Mac下 Redis 和 Php-redis扩展安装 ","date":"2016-12-05T05:54:00.000Z","path":"2016/12/05/2016-12-05 11:46:43 PHP-Redis/","text":"Mac下 Redis 和 Php-redis扩展安装 通过HomeBrew安装Redis 执行命令:brew install Redis 安装完之后可以看到提示的信息 启动Redis使用 redis-server 使用命令 redis-cli ping测试 如果提示pong就代表成功 通过HomeBrew安装PHP-Redis这里我的PHP版本是7.0的,所以执行的命令就是 brew install php70-redis 安装完之后重启你的服务器,比如Apache,Valet然后在PHPinfo(在项目根目录下修改index.php 内容为phpinfo())里面查看是否用Redis扩展,如果有,显示版本,就安装成功了","tags":[{"name":"Redis","slug":"Redis","permalink":"http://vittaSpace.tk/tags/Redis/"}]},{"title":"Mac 下配置 apache PHP mysql ","date":"2016-12-01T05:54:00.000Z","path":"2016/12/01/2016-12-01-general-php-resources/","text":"Mac 下配置 apache PHP mysql 步骤 安装 homebrew 安装 php (mac 默认有PHP 版本 )查看本机php版本：php -v 配置apache（mac默认有apache） vhost 安装mysql 配置 hosts 安装 npm 安装homebrew1ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 安装：apache php版本（选装 mac自带apache php）1234brew tap homebrew/apachebrew tap homebrew/phpbrew install httpd24brew install php53 安装Mysql1brew install mysql (可以用brew info mysql 查询信息) 配置mac 自带apache重启 apache服务器 sudo apachectl restart 查看80端口 netstat -anl | grep &quot;80&quot; 地址： /etc/apache2/httpd.conf (可先复制备份一份 sudo cp /etc/apache2/httpd.conf /etc/apache2/httpd.conf.backup ) 在http.conf中 有Listen 80 即为监听80端口 “#LoadModule php5_module libexec/apache2/libphp5.so 将#删除 配置mac自带的php版本 “ 如果本地mac 自带php版本过低 需升级。php版本过低想升级 在httpd.conf 加入引用本地php的配置 LoadModule php5_module /usr/local/php5-5.6.27-20161101-100213/libphp5.so（自己的路径） 配置apache -&gt;/etc/apache/extra/httpd-vhosts.conf (最好备份) 12345678910111213141516 &lt;VirtualHost *:80&gt; ServerAdmin xxx.xxx.xxx DocumentRoot &quot;项目路径/public(如果是前段项目就没有public)&quot; ServerName xxx.xxx.xxx #DirectoryIndex index.php ErrorLog &quot;/private/var/log/apache2/sites-error_log&quot; CustomLog &quot;/private/var/log/apache2/sites-access_log&quot; common &lt;Directory &quot;项目路径/public(同上)&gt; Options FollowSymLinks AllowOverride All Order allow,deny allow from all Require all granted &lt;/Directory&gt;&lt;/VirtualHost&gt; 端口号为：80 DocumentRoot “/Users/**/projects/webtailor-backend/public” 配置后端入口 在项目的public目录下 后端代码 不要放在桌面上 最好在/users目录下 新建一个项目文件夹 配置apache -&gt;/etc/hosts (最好备份),增加一个域名指向127.0.0.1 参考 Lumen后台:Comopser 安装 项目根目录 1composer install 1composer require basicit/lumen-vendor-publish 1composer dump-autoload 前端：npm install -g npm npm install -g gulp 每次改完代码执行 gulp build 如果不想每次都执行可以用gulp watch 配置数据库启动 mysql mysql.server start 查看mysql 是否运行 brew services list netstat -anl | grep &quot;3306&quot; mysql默认密码为空，修改密码 mysqladmin -uroot password &quot;密码&quot; -&gt;修改密码为root: mysqladmin -uroot password root mysql2000错误 创建可以用可视化软件","tags":[{"name":"PHP","slug":"PHP","permalink":"http://vittaSpace.tk/tags/PHP/"}]},{"title":"初学PHP Laravel ","date":"2016-11-30T16:00:00.000Z","path":"2016/12/01/2016-12-01-general-PHP_New-resources/","text":"初学PHP Laravel 不用Apache改用ValetValet 要求 mac 操作系统和 Homebrew。安装之前，你需要确保没有其他程序如 Apache 或者 Nginx 占用你本地机器的 80 端口。 安装步骤如下： 安装或者更新 Homebrew 到最新版本,使用命令: brew update 使用 brew install homebrew/php/php70 命令安装 PHP 7.0 。 通过 Composer 安装 Valet 命令为 composer global require laravel/valet。 请确保 ~/.composer/vendor/bin 目录在系统环境变量 「PATH」 中。如果不在,可以用命令:export PATH=&quot;$PATH:$HOME/.composer/vendor/bin&quot;导入,然后输入:source ~/.bashrc 运行 valet install 命令。 这将会配置并安装 Valet 和 DnsMasq，并注册 Valet 随你的系统启动。 一旦完成 Valet 安装，试着使用命令如ping foobar.dev 在终端 ping 一些任意的*.dev 域名。如果 Valet 安装正确你会看到来自 127.0.0.1 的响应。 使用其他顶级域名 默认的，Valet 使用 .dev 顶级域名。如果你喜欢其他域名，可以使用 valet domain tld-name命令,不建议使用www开头和com结尾。 例如，如果你想使用 .app 来替换 .dev，运行valet domain app然后 Valet 将会自动的使用 *.app 来为你的项目提供服务。 你可以使用 composer global update 命令升级你的 Valet 程序，升级之后，最好使用 valet install 命令更新 Valet 的配置文件。 服务站点一旦完成 Valet 安装，你就可以启动服务站点，Valet 提供两个命令帮助你启动你的 Laravel 站点： park 和 link。 park 命令 在你的 Mac 中创建一个新目录，例如mkdir ~/Sites ，然后，使用cd ~/Sites并运行 valet park。这个命令将会将当前所在目录作为 Web 根目录， Valet 将会在这个目录中搜索站点。 接下来，在这个目录中创建一个新的 Laravel 站点：laravel new blog。在浏览器中访问 http://blog.dev 。 这就是我们要做的全部工作 现在，所有在 Site 目录中的 Laravel 项目都可以通过 http://folder-name.dev 这种方式访问，是不是很方便。 link 命令 link 命令可以用于你的本地 Laravel 站点。这个命令在你想要在目录中提供单个站点是很有用。 要使用这个命令，在你的终端中切换到你的某个项目并运行 valet link app-name。 Valet 将会在 ~/.valet/Sites 中创建一个符号链接并指向当前工作目录。 运行完 link 命令, 你可以在浏览器中通过 http://app-name.dev 来访问站点。要查看所有的链接目录，运行 valet links命令。你也可以通过 valet unlink app-name来删除符号链接。 构建完整站点等 参考官方文档 要求输入的参数条件 123456789101112try &#123; $this-&gt;validate($request, [ &apos;currency_date&apos; =&gt; &apos;required|min:6|max:10&apos;, &apos;currency&apos; =&gt; &apos;required&apos;, ]); &#125; catch (HttpResponseException $e) &#123; return response()-&gt;json([ &apos;success&apos; =&gt; false, &apos;message&apos; =&gt; &apos;date-formatter is wrong.&apos;, &apos;error&apos; =&gt; IlluminateResponse::HTTP_BAD_REQUEST ], IlluminateResponse::HTTP_BAD_REQUEST); &#125; 查询字符串中以…开头 1$result = Currency::where(&apos;currency_date&apos;,&apos;like&apos;,$date.&apos;%&apos;)-&gt;get();","tags":[{"name":"Laravel","slug":"Laravel","permalink":"http://vittaSpace.tk/tags/Laravel/"}]},{"title":"Lumen项目 migrate Mysql ","date":"2016-11-27T16:00:00.000Z","path":"2016/11/28/2016-11-28-general-lumenMysql-resources /","text":"#lumen项目 migrate Mysql 登录MySql 创建一个名字和lumen项目目录下.env文件里DB_DATABASE 名字一样的数据库. 执行php artisan migrate 进行填充,执行php artisan db:seed 刷新数据库结构并执行数据填充 php artisan migrate:refresh --seed 需要添加字段的话在迁移里添加: 123456789101112131415161718192021222324252627282930&lt;?phpuse Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Database\\Migrations\\Migration;class CreateFlightsTable extends Migration&#123; /** * 运行数据库迁移。 * * @return void */ public function up() &#123; Schema::create(&apos;flights&apos;, function (Blueprint $table) &#123; $table-&gt;increments(&apos;id&apos;); $table-&gt;string(&apos;name&apos;); $table-&gt;string(&apos;airline&apos;); $table-&gt;timestamps(); &#125;); &#125; /** * 回滚数据库迁移。 * * @return void */ public function down() &#123; Schema::drop(&apos;flights&apos;); &#125;&#125; 然后运行php artisan migrate:refresh --seed","tags":[{"name":"Lumen","slug":"Lumen","permalink":"http://vittaSpace.tk/tags/Lumen/"}]},{"title":"Apache 3个常用命令,Mysql无法开启的问题 ","date":"2016-11-23T16:00:00.000Z","path":"2016/11/24/2016-11-24-general-apache-resources/","text":"Apache 3个常用命令 开启Apache: sudo apachectl start 关闭Apache: sudo apachectl stop 重启Apache: sudo apachectl restart 如果用brew下载了新版的Php之后apache打不开 可能是使用 brew install php56的时候没有带参数尽量使用 brew install php70 --with-apxs2 --with-apache --with-gmp --with-imap --with-tidy --with-debug然后在httpd.conf里配置LoadModule php5_modele /usr/local/Cellar/php56/5.6.27_4/libexec/apache2/libphp5.so lumen项目 migrate Mysql 登录MySql 创建一个名字和lumen项目目录下.env文件里DB_DATABASE 名字一样的数据库. 执行php artisan migrate 进行填充,执行php artisan db:seed Mysql无法开启的问题Mysql在无论怎么安装卸载修改变量都无法开启成功的情况下,可以尝试删除Mysql,然后用 老版本 https://pan.baidu.com/s/1qYrmAZU 密码: teu1安装,通过系统偏好设置的Mysql点击开启,使用/usr/local/mysql/bin/mysql进入数据库,mysql默认密码为空，修改密码mysqladmin -uroot password &quot;密码&quot; 例如 修改密码为root mysqladmin -uroot password root Memory limit errorsComposer官方问题查询可以在phpinfo()里面查看php.ini在哪里(Loaded Configuration File这一项)然后把memory_limit = -1 To get the current memory_limit value, run:php -r &quot;echo ini_get(&#39;memory_limit&#39;).PHP_EOL;&quot; Or, you can increase the limit with a command-line argument:php -d memory_limit=-1 composer.phar &lt;...&gt;","tags":[{"name":"Apache Mysql","slug":"Apache-Mysql","permalink":"http://vittaSpace.tk/tags/Apache-Mysql/"}]}]