[{"title":"Git命令 ","date":"2016-12-06T02:47:27.000Z","path":"2016/12/06/2016-12-06 10:36:52 Git命令/","text":"Git命令git init 初始化本地git仓库（创建新仓库） git config –global user.name “xxx” 配置用户名 git config –global user.email “xxx@xxx.com” 配置邮件 git config –global color.ui true git status等命令自动着色 git config –global color.status auto git config –global color.diff auto git config –global color.branch auto git config –global color.interactive auto git config –global –unset http.proxy remove proxy configuration on git git clone git+ssh://git@192.168.53.168/VT.git clone远程仓库 git status 查看当前版本状态（是否修改） git add xyz 添加xyz文件至index git add . 增加当前子目录下所有更改过的文件至index git commit -m ‘xxx’ 提交 git commit –amend -m ‘xxx’ 合并上一次提交（用于反复修改） git commit -am ‘xxx’ 将add和commit合为一步 git rm xxx 删除index中的文件 git rm -r * 递归删除 git log 显示提交日志 git log -1 显示1行日志 -n为n行 git log -5 git log –stat 显示提交日志及相关变动文件 git log -p -m git show dfb02e6e4f2f7b573337763e5c0013802e392818 显示某个提交的详细内容 git show dfb02 可只用commitid的前几位 git show HEAD 显示HEAD提交日志 git show HEAD^ 显示HEAD的父（上一个版本）的提交日志^^为上两个版本 ^5为上5个版本 git tag 显示已存在的tag git tag -a v2.0 -m ‘xxx’ 增加v2.0的tag git show v2.0 显示v2.0的日志及详细内容 git log v2.0 显示v2.0的日志 git diff 显示所有未添加至index的变更 git diff –cached 显示所有已添加index但还未commit的变更 git diff HEAD^ 比较与上一个版本的差异 git diff HEAD – ./lib 比较与HEAD版本lib目录的差异 git diff origin/master..master 比较远程分支master上有本地分支master上没有的 git diff origin/master..master –stat 只显示差异的文件，不显示具体内容 git remote add origin git+ssh://git@192.168.53.168/VT. 增加远程定义（用于push/pull/fetch） git branch 显示本地分支 git branch –contains 50089 显示包含提交50089的分支 git branch -a 显示所有分支 git branch -r 显示所有原创分支 git branch –merged 显示所有已合并到当前分支的分支 git branch –no-merged 显示所有未合并到当前分支的分支 git branch -m master master_copy 本地分支改名 git checkout -b master_copy 从当前分支创建新分支master_copy并检出 git checkout -b master master_copy 上面的完整版 git checkout features/performance 检出已存在的features/performance分支git checkout –track hotfixes/BJVEP933 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支 git checkout v2.0 检出版本v2.0 git checkout -b devel origin/develop 从远程分支develop创建新本地分支devel并检出 git checkout – README 检出head版本的README文件（可用于修改错误回退） git merge origin/master 合并远程master分支至当前分支 git cherry-pick ff44785404a8e 合并提交ff44785404a8e的修改 git push origin master 将当前分支push到远程master分支 git push origin :hotfixes/BJVEP933 删除远程仓库的hotfixes/BJVEP933分支 git push –tags 把所有tag推送到远程仓库 git fetch 获取所有远程分支（不更新本地分支，另需merge） git fetch –prune 获取所有原创分支并清除服务器上已删掉的分支 git pull origin master 获取远程分支master并merge到当前分支 git mv README README2 重命名文件README为README2 git reset –hard HEAD 将当前版本重置为HEAD（通常用于merge失败回退） git rebase git branch -d hotfixes/BJVEP933 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）git branch -D hotfixes/BJVEP933 强制删除分支hotfixes/BJVEP933 git ls-files 列出git index包含的文件 git show-branch 图示当前分支历史 git show-branch –all 图示所有分支历史 git whatchanged 显示提交历史对应的文件修改 git revert dfb02e6e4f2f7b573337763e5c0013802e392818撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818 git ls-tree HEAD 内部命令：显示某个git对象 git rev-parse v2.0 内部命令：显示某个ref对于的SHA1 HASH git reflog 显示所有提交，包括孤立节点 git show HEAD@{5} git show master@{yesterday} 显示master分支昨天的状态 git log –pretty=format:’%h %s’ –graph 图示提交日志 git show HEAD~3 git show -s –pretty=raw 2be7fcb476 git stash 暂存当前修改，将所有至为HEAD状态 git stash list 查看所有暂存 git stash show -p stash@{0} 参考第一次暂存 git stash apply stash@{0} 应用第一次暂存 git grep “delete from” 文件中搜索文本“deletefrom” git grep -e ‘#define’ –and -e SORT_DIRENT git gc git fsck","tags":[{"name":"Git","slug":"Git","permalink":"http://vittaSpace.tk/tags/Git/"}]},{"title":"postgresql数据库导入 ","date":"2016-12-06T02:47:27.000Z","path":"2016/12/06/2016-12-07 15:14:22  postgresql数据库导入/","text":"创建用户 createuser -d -a -P 用户名 导入到本地数据库 psql -h 0.0.0.0 -d 数据库 -U 用户 -p 5432 -f 要导入的数据库.sql","tags":[{"name":"postgresql","slug":"postgresql","permalink":"http://vittaSpace.tk/tags/postgresql/"}]},{"title":"symfony学习记录 ","date":"2016-12-06T02:47:27.000Z","path":"2016/12/06/2016-12-07 18-14-16 symfony学习中的记录/","text":"代码结构 app/ 里存放的大部分是配置信息 src/ 存放的是php代码 vendor 存放的是第三方的库 web/ 存放的是前端代码 在src/里 M:Entity,V:web/(根目录里的),C:Controller 在开发中修改了.pug 或者 es5/6 文件,想要看到效果需要执行 gulp watch 前端开发中添加控件使用了第三方库 Bootstrap 关于这个库在学习中我会另外记录. 跳转$state.go(&#39;frame.a-b&#39;) 跳转到web/scripts/states/a/b.js b.js里面在angular.module里含有frame.a-b,等学习了angular之后再补充 数据库中$query = $this-&gt;em()-&gt;getRepository(&#39;AppBundle:Company&#39;)$result = $query-&gt;getQuery()-&gt;getResult();$query可以添加语句$result 就是查询到的结果","tags":[{"name":"php","slug":"php","permalink":"http://vittaSpace.tk/tags/php/"}]},{"title":"Mysql数据库导入","date":"2016-12-05T06:22:13.000Z","path":"2016/12/05/Mysql-import-md/","text":"Mac下Mysql数据库导入 使用终端或者可视化软件创建数据库 终端,输入/usr/local/mysql/bin/mysql -u 用户名 -p回车 输入密码 进入数据库 选择刚刚创建的数据库 执行source 数据库.sql文件路径","tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://vittaSpace.tk/tags/Mysql/"}]},{"title":"Mac下 Redis 和 Php-redis扩展安装 ","date":"2016-12-05T05:54:00.000Z","path":"2016/12/05/2016-12-05 11:46:43 PHP-Redis/","text":"Mac下 Redis 和 Php-redis扩展安装 通过HomeBrew安装Redis执行命令:brew install Redis 安装完之后可以看到提示的信息 启动Redis使用 redis-server 使用命令 redis-cli ping测试 如果提示pong就代表成功 通过HomeBrew安装PHP-Redis这里我的PHP版本是7.0的,所以执行的命令就是 brew install php70-redis 安装完之后重启你的服务器,比如Apache,Valet然后在PHPinfo(在项目根目录下修改index.php 内容为phpinfo())里面查看是否用Redis扩展,如果有,显示版本,就安装成功了","tags":[{"name":"Redis","slug":"Redis","permalink":"http://vittaSpace.tk/tags/Redis/"}]},{"title":"Mac 下配置 apache PHP mysql ","date":"2016-12-01T05:54:00.000Z","path":"2016/12/01/2016-12-01-general-php-resources/","text":"Mac 下配置 apache PHP mysql 步骤 安装 homebrew 安装 php (mac 默认有PHP 版本 )查看本机php版本：php -v 配置apache（mac默认有apache） vhost 安装mysql 配置 hosts 安装 npm 安装homebrew1ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 安装：apache php版本（选装 mac自带apache php）1234brew tap homebrew/apachebrew tap homebrew/phpbrew install httpd24brew install php53 安装Mysql1brew install mysql (可以用brew info mysql 查询信息) 配置mac 自带apache重启 apache服务器 sudo apachectl restart 查看80端口 netstat -anl | grep &quot;80&quot; 地址： /etc/apache2/httpd.conf (可先复制备份一份 sudo cp /etc/apache2/httpd.conf /etc/apache2/httpd.conf.backup ) 在http.conf中 有Listen 80 即为监听80端口 “#LoadModule php5_module libexec/apache2/libphp5.so 将#删除 配置mac自带的php版本 “ 如果本地mac 自带php版本过低 需升级。php版本过低想升级 在httpd.conf 加入引用本地php的配置 LoadModule php5_module /usr/local/php5-5.6.27-20161101-100213/libphp5.so（自己的路径） 配置apache -&gt;/etc/apache/extra/httpd-vhosts.conf (最好备份) 12345678910111213141516 &lt;VirtualHost *:80&gt; ServerAdmin xxx.xxx.xxx DocumentRoot &quot;项目路径/public(如果是前段项目就没有public)&quot; ServerName xxx.xxx.xxx #DirectoryIndex index.php ErrorLog &quot;/private/var/log/apache2/sites-error_log&quot; CustomLog &quot;/private/var/log/apache2/sites-access_log&quot; common &lt;Directory &quot;项目路径/public(同上)&gt; Options FollowSymLinks AllowOverride All Order allow,deny allow from all Require all granted &lt;/Directory&gt;&lt;/VirtualHost&gt; 端口号为：80 DocumentRoot “/Users/**/projects/webtailor-backend/public” 配置后端入口 在项目的public目录下 后端代码 不要放在桌面上 最好在/users目录下 新建一个项目文件夹 配置apache -&gt;/etc/hosts (最好备份),增加一个域名指向127.0.0.1 参考 Lumen后台:Comopser 安装 项目根目录 1composer install 1composer require basicit/lumen-vendor-publish 1composer dump-autoload 前端：npm install -g npm npm install -g gulp 每次改完代码执行 gulp build 如果不想每次都执行可以用gulp watch 配置数据库启动 mysql mysql.server start 查看mysql 是否运行 brew services list netstat -anl | grep &quot;3306&quot; mysql默认密码为空，修改密码 mysqladmin -uroot password &quot;密码&quot; -&gt;修改密码为root: mysqladmin -uroot password root mysql2000错误 创建可以用可视化软件","tags":[{"name":"PHP","slug":"PHP","permalink":"http://vittaSpace.tk/tags/PHP/"}]},{"title":"初学PHP Laravel ","date":"2016-11-30T16:00:00.000Z","path":"2016/12/01/2016-12-01-general-PHP_New-resources/","text":"初学PHP Laravel 不用Apache改用ValetValet 要求 mac 操作系统和 Homebrew。安装之前，你需要确保没有其他程序如 Apache 或者 Nginx 占用你本地机器的 80 端口。 安装步骤如下： 安装或者更新 Homebrew 到最新版本,使用命令: brew update 使用 brew install homebrew/php/php70 命令安装 PHP 7.0 。 通过 Composer 安装 Valet 命令为 composer global require laravel/valet。 请确保 ~/.composer/vendor/bin 目录在系统环境变量 「PATH」 中。如果不在,可以用命令:export PATH=&quot;$PATH:$HOME/.composer/vendor/bin&quot;导入,然后输入:source ~/.bashrc 运行 valet install 命令。 这将会配置并安装 Valet 和 DnsMasq，并注册 Valet 随你的系统启动。 一旦完成 Valet 安装，试着使用命令如ping foobar.dev 在终端 ping 一些任意的*.dev 域名。如果 Valet 安装正确你会看到来自 127.0.0.1 的响应。 使用其他顶级域名 默认的，Valet 使用 .dev 顶级域名。如果你喜欢其他域名，可以使用 valet domain tld-name命令,不建议使用www开头和com结尾。 例如，如果你想使用 .app 来替换 .dev，运行valet domain app然后 Valet 将会自动的使用 *.app 来为你的项目提供服务。 你可以使用 composer global update 命令升级你的 Valet 程序，升级之后，最好使用 valet install 命令更新 Valet 的配置文件。 服务站点一旦完成 Valet 安装，你就可以启动服务站点，Valet 提供两个命令帮助你启动你的 Laravel 站点： park 和 link。 park 命令 在你的 Mac 中创建一个新目录，例如mkdir ~/Sites ，然后，使用cd ~/Sites并运行 valet park。这个命令将会将当前所在目录作为 Web 根目录， Valet 将会在这个目录中搜索站点。 接下来，在这个目录中创建一个新的 Laravel 站点：laravel new blog。在浏览器中访问 http://blog.dev 。 这就是我们要做的全部工作 现在，所有在 Site 目录中的 Laravel 项目都可以通过 http://folder-name.dev 这种方式访问，是不是很方便。 link 命令 link 命令可以用于你的本地 Laravel 站点。这个命令在你想要在目录中提供单个站点是很有用。 要使用这个命令，在你的终端中切换到你的某个项目并运行 valet link app-name。 Valet 将会在 ~/.valet/Sites 中创建一个符号链接并指向当前工作目录。 运行完 link 命令, 你可以在浏览器中通过 http://app-name.dev 来访问站点。要查看所有的链接目录，运行 valet links命令。你也可以通过 valet unlink app-name来删除符号链接。 构建完整站点等 参考官方文档 要求输入的参数条件 123456789101112try &#123; $this-&gt;validate($request, [ &apos;currency_date&apos; =&gt; &apos;required|min:6|max:10&apos;, &apos;currency&apos; =&gt; &apos;required&apos;, ]); &#125; catch (HttpResponseException $e) &#123; return response()-&gt;json([ &apos;success&apos; =&gt; false, &apos;message&apos; =&gt; &apos;date-formatter is wrong.&apos;, &apos;error&apos; =&gt; IlluminateResponse::HTTP_BAD_REQUEST ], IlluminateResponse::HTTP_BAD_REQUEST); &#125; 查询字符串中以…开头 1$result = Currency::where(&apos;currency_date&apos;,&apos;like&apos;,$date.&apos;%&apos;)-&gt;get();","tags":[{"name":"Laravel","slug":"Laravel","permalink":"http://vittaSpace.tk/tags/Laravel/"}]},{"title":"Lumen项目 migrate Mysql ","date":"2016-11-27T16:00:00.000Z","path":"2016/11/28/2016-11-28-general-lumenMysql-resources /","text":"#lumen项目 migrate Mysql 登录MySql 创建一个名字和lumen项目目录下.env文件里DB_DATABASE 名字一样的数据库. 执行php artisan migrate 进行填充,执行php artisan db:seed 刷新数据库结构并执行数据填充 php artisan migrate:refresh --seed 需要添加字段的话在迁移里添加: 123456789101112131415161718192021222324252627282930&lt;?phpuse Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Database\\Migrations\\Migration;class CreateFlightsTable extends Migration&#123; /** * 运行数据库迁移。 * * @return void */ public function up() &#123; Schema::create(&apos;flights&apos;, function (Blueprint $table) &#123; $table-&gt;increments(&apos;id&apos;); $table-&gt;string(&apos;name&apos;); $table-&gt;string(&apos;airline&apos;); $table-&gt;timestamps(); &#125;); &#125; /** * 回滚数据库迁移。 * * @return void */ public function down() &#123; Schema::drop(&apos;flights&apos;); &#125;&#125; 然后运行php artisan migrate:refresh --seed","tags":[{"name":"Lumen","slug":"Lumen","permalink":"http://vittaSpace.tk/tags/Lumen/"}]},{"title":"Apache 3个常用命令,Mysql无法开启的问题 ","date":"2016-11-23T16:00:00.000Z","path":"2016/11/24/2016-11-24-general-apache-resources/","text":"Apache 3个常用命令 开启Apache: sudo apachectl start 关闭Apache: sudo apachectl stop 重启Apache: sudo apachectl restart 如果用brew下载了新版的Php之后apache打不开可能是使用 brew install php56的时候没有带参数尽量使用 brew install php70 --with-apxs2 --with-apache --with-gmp --with-imap --with-tidy --with-debug然后在httpd.conf里配置LoadModule php5_modele /usr/local/Cellar/php56/5.6.27_4/libexec/apache2/libphp5.so lumen项目 migrate Mysql 登录MySql 创建一个名字和lumen项目目录下.env文件里DB_DATABASE 名字一样的数据库. 执行php artisan migrate 进行填充,执行php artisan db:seed Mysql无法开启的问题Mysql在无论怎么安装卸载修改变量都无法开启成功的情况下,可以尝试删除Mysql,然后用 老版本 https://pan.baidu.com/s/1qYrmAZU 密码: teu1安装,通过系统偏好设置的Mysql点击开启,使用/usr/local/mysql/bin/mysql进入数据库,mysql默认密码为空，修改密码mysqladmin -uroot password &quot;密码&quot; 例如 修改密码为root mysqladmin -uroot password root","tags":[{"name":"Apache Mysql","slug":"Apache-Mysql","permalink":"http://vittaSpace.tk/tags/Apache-Mysql/"}]}]